package model;

import com.google.common.base.Throwables;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;
import org.junit.After;
import org.junit.Before;

import org.elasticsearch.client.Client;
import org.elasticsearch.node.Node;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;

import static org.elasticsearch.node.NodeBuilder.nodeBuilder;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.matchers.JUnitMatchers.*;


public class DAO_ITCase {

    Logger logger = Logger.getLogger(getClass());
    EsServer server = new EsServer();


    @Before
    public void setUp() throws Exception {
        server.start();
    }

    @After
    public void tearDown() throws Exception {
        server.close();
    }

    @Test
    public void testDao() {


    }

    public Client getClient() {
        return server.client();
    }



    class EsServer {
        private Node server;

        void start(){

            BasicConfigurator.configure();
            server = nodeBuilder().build();
            server.start();
            checkServerStatus();
        }

        void close(){
            server.close();
        }

        public Client client() {
            return server.client();
        }


        ClusterHealthStatus getHealthStatus() {
            return getClient().admin().cluster().prepareHealth().execute().actionGet().getStatus();
        }


        void checkServerStatus() {
            ClusterHealthStatus status = getHealthStatus();

            // Check the current status of the ES cluster.
            if (ClusterHealthStatus.RED.equals(status)) {
                logger.info("ES cluster status is " + status + ". Waiting for ES recovery.");

                // Waits at most 30 seconds to make sure the cluster health is at least yellow.
                getClient().admin().cluster().prepareHealth()
                        .setWaitForYellowStatus()
                        .setTimeout("30s")
                        .execute().actionGet();
            }

            // Check the cluster health for a final time.
            status = getHealthStatus();
            logger.info("ES cluster status is " + status);

            // If we are still in red status, then we cannot proceed.
            if (ClusterHealthStatus.RED.equals(status)) {
                throw new RuntimeException("ES cluster health status is RED. Server is not able to start.");
            }

        }
    }

}
